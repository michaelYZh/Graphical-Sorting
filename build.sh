#!/bin/bash

# Exit on error
set -e

echo "=== Graphical Sorting Build Script ==="
echo "Starting build process..."

# Check if conan is installed
if ! command -v conan &> /dev/null; then
    echo "Error: Conan package manager is not installed."
    echo "Please install Conan first: pip install conan"
    exit 1
fi

# Check if cmake is installed
if ! command -v cmake &> /dev/null; then
    echo "Error: CMake is not installed."
    echo "Please install CMake first."
    exit 1
fi

# Create build directory if it doesn't exist
mkdir -p build

# Install dependencies with Conan
echo "=== Installing dependencies with Conan ==="
conan install . --output-folder=build --build=missing -s build_type=Release

# Navigate to build directory
cd build

echo "=== Configuring with CMake ==="
# Use the CMake preset generated by Conan if CMake version is 3.23 or higher
if cmake --version | grep -q "version 3.2[3-9]\|version 3.[3-9]\|version [4-9]"; then
    cmake --preset=conan-release ..
else
    # Fallback for older CMake versions
    cmake -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_BUILD_TYPE=Release ..
fi

echo "=== Building the project ==="
cmake --build . --config Release

if [ -f "./GraphicalSorting" ]; then
    echo "=== Build completed successfully! ==="
    echo "You can run the application with: ./build/GraphicalSorting"
    # Copy the executable to the root directory for convenience
    cp ./GraphicalSorting ..
    echo "Executable has been copied to the project root for convenience."
else
    echo "=== Build failed: Executable not found ==="
    exit 1
fi

# Return to the original directory
cd ..
